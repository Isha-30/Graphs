class Solution {
    int[][] dirs = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    int row = 0;
    int col = 0;
    
    public int maxDistance(int[][] grid) {
        row = grid.length; col = grid[0].length;
        
        boolean[][] visited = new boolean[row][col];
        Queue<int[]> que = new LinkedList<>();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 1) { // land cell, enqueue
                    que.add(new int[]{i, j});
                    visited[i][j] = true;
                }
            }
        }
        // fail fast
        if (que.size()== 0 || que.size() == row * col)
            return -1;
        
        int res = -1;
        // start expanding
        while (!que.isEmpty()) {
            int size = que.size();
            for (int k = 0; k < size; k++) {
                int[] cur = que.remove();
                
                for (int[] dir : dirs) {
                    int x = dir[0] + cur[0];
                    int y = dir[1] + cur[1];
                    if (x <0 || y <0 || x >=row || y>= col || visited[x][y]) {
                        continue;
                    }
                    visited[x][y] = true;
                    que.add(new int[]{x, y});
                }
            }
            res++;
        }
        
        return res;
    }
}
