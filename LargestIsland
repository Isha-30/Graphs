public class Solution {
	public static int maxAreaOfIsland(int[][] grid, int n, int m) {
		int ans = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1){
                    int a = DFSUtilIsland(i,j,n,m,grid);
                    ans = Math.max(a,ans);
                }
            }
        }
        return ans;
	}
    private static int DFSUtilIsland(int row,int col,int n,int m,int[][] grid){
        if(row < 0 || row >=n || col < 0 || col >=m || grid[row][col] == 0){
            return 0;
        }

        grid[row][col] = 0;

        int left = DFSUtilIsland(row,col-1,n,m,grid);
        int right = DFSUtilIsland(row,col+1,n,m,grid);
        int up = DFSUtilIsland(row-1,col,n,m,grid);
        int down = DFSUtilIsland(row+1,col,n,m,grid);

        int upleft = DFSUtilIsland(row-1,col-1,n,m,grid);
        int upright = DFSUtilIsland(row-1,col+1,n,m,grid);
        int downleft = DFSUtilIsland(row+1,col-1,n,m,grid);
        int downright = DFSUtilIsland(row+1,col+1,n,m,grid);

        return 1+left+right+up+down+upleft+upright+downleft+downright;
	}
}
