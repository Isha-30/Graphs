public class Solution 
{
	private static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	private static boolean isPossible(ArrayList<ArrayList<Integer>> adjList, int curr, int parent, int currColour, int[] colour) 
    {	
        // Update the colour of curr
		colour[curr] = currColour;
		boolean possible = true;
		
        // Traverse through all vertices connected with curr by an edge
		for (int i = 0; i < adjList.get(curr).size(); i++) 
        {	
            // The variable next stores the i-th vertex connected with curr
			int next = adjList.get(curr).get(i);

			if (colour[next] == 0) 
            {
				possible = (possible && isPossible(adjList, next, curr, -1 * currColour, colour));
			} 
            
            // Colour of curr is equal to colour of next 
            else if (next != parent && colour[next] == currColour) 
            {
				return false;
			}
		}
		
        // Return the variable possible
		return possible;
	}

	public static void main(String[] args) throws IOException 
    {
		String[] n_m = br.readLine().trim().split(" ");
		int n = Integer.parseInt(n_m[0].trim());
		int m = Integer.parseInt(n_m[1].trim());

		ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();

		for (int i = 0; i < n + 1; i++) 
        {
			adjList.add(new ArrayList<>());
		}
		
        // Create an adjacency list
		for (int i = 0; i < m; i++) 
        {
			String[] u_v = br.readLine().trim().split(" ");

			int u = Integer.parseInt(u_v[0].trim());
			int v = Integer.parseInt(u_v[1].trim());
			
            // Add an edge between u and v 
			adjList.get(u).add(v);
			adjList.get(v).add(u);
		}

		boolean possible = true;

		int[] colour = new int[n + 1];
		
        // Traverse through all vertices
		for (int i = 1; i <= n; ++i) 
        {	
			if (colour[i] == 0) 
            {
				possible = (possible && isPossible(adjList, i, -1, 1, colour));
			}
		}
		
        // Check if possible is equal to true
		if (possible) 
        {
			System.out.println("YES");
		} 
        else
        {
			System.out.println("NO");
		}
	}
}
