public class Graph {
    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v){
        adj.get(u).add(v);
    }

    public static void topologicalSort(ArrayList<ArrayList<Integer>> adj, int V){
        int[] in_degree = new int[V];
        for(int i = 0; i<V; i++){
            for(int x : adj.get(i))
                in_degree[x]++;
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i =0; i<V; i++){
            if(in_degree[i] == 0)
                q.add(i);
        }
        int count = 0;
        while(!q.isEmpty()){
            int u = q.poll();
            for(int x : adj.get(u)){
                if(--in_degree[x]==0)
                    q.add(x);
            }
            count++;
        }
        if(count!=V)
            System.out.println("Cycle exits");
        else
            System.out.println("No cycle exists");
    }
}
