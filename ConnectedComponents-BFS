public class Graph {
    public static void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v){
        adj.get(u).add(v);
        adj.get(v).add(u);
    }

    public static void BFS(ArrayList<ArrayList<Integer>> adj, int s, boolean[] visited){
        Queue<Integer> q = new LinkedList<>();
        visited[s] = true;
        q.add(s);

        while(!q.isEmpty()){
            int u = q.poll();
            System.out.print(u+ " ");

            for(int v : adj.get(u)){
                if(visited[v] == false){
                    visited[v] = true;
                    q.add(v);
                }
            }
        }
    }
    public static int BFSdis(ArrayList<ArrayList<Integer>> adj, int V){
        int count = 0;
        boolean visited[] = new boolean[V];
        for(int i = 0; i<V; i++)
            visited[i] = false;
        for(int i = 0; i<V; i++){
            if(visited[i] == false){
                BFS(adj, i, visited);
                count++;
            }
        }
        return count;
    }
}
